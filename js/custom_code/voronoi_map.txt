

function VoronoiMap() {

    var current_loss = null;
    var jitter_start_size = 200;
    var jitter_multi_when_previous_improved = 1;
    var jitter_multi_when_previous_worse = 0.9;
    var timer = null;


    var bounds = VMT.mapholder.map.getBounds(),
    topLeft = VMT.mapholder.map.latLngToLayerPoint(bounds.getNorthWest()),
    bottomRight = VMT.mapholder.map.latLngToLayerPoint(bounds.getSouthEast())
        
    var voronoi_fn = d3.voronoi()
            .x(function(d) {
                return d.x ;  //To avoid two points being at the same pixel values and therefore having an uncomputable voronoi
            })
            .y(function(d) {
                return d.y ;  //To avoid two points being at the same pixel values
            })
            .extent([
                [0, 0],
                [bottomRight.x, bottomRight.y]
            ])

    this.draw_from_scratch = function() {

        //Get layers 
    
        me.voronoi_cells_layer = d3.select("#voronoi_cells_layer")
        me.demand_lines_layer = d3.select("#demand_lines_layer")
        me.facility_location_layer = d3.select("#facility_location_layer")

        // Draw cells

        redraw_voronoi()

    }

    this.locations = []

    

    new_location = {
      "id": "facility_1",
      "lat": 51.9039908342,
      "lng": 0.1283539949,
        previous_jitter: [0, 0],
        previous_loss_improve: false,
        jitter_size: jitter_start_size
    }

    // this.locations.push(new_location)

    me = this;

    function update_dots(point) {

        // If the new point is within 0.5km of an existing point, don't add

        var closest_point = get_closest_point(point.latlng)
        if (closest_point) {
            var this_distance = get_distance(point.latlng, closest_point)
            if (this_distance<0.5) {
                return 
            }
        }
        


        new_location = {
          "id": "facility_" + (me.locations.length + 1),
          "lat": point.latlng.lat,
          "lng": point.latlng.lng,
          "x": point.layerPoint.x,
          "y": point.layerPoint.y,
          previous_jitter: [0, 0],
        previous_loss_improve: false,
        jitter_size: jitter_start_size
        }
        me.locations.push(new_location)


        
        redraw_voronoi()

    }

    var drag = d3.drag()
        .on("drag", dragged)

    function dragged(d) {


        d.y = d3.event.y + (d3.randomUniform()() - 0.5)*0.0001
        d.x = d3.event.x+ (d3.randomUniform()() - 0.5)*0.0001

        // convert to lat lng
        latlng = VMT.mapholder.map.layerPointToLatLng([d.x,d.y])

     


        //update locations data
        //me.locations = d3.select("#facility_location_layer").selectAll(".locations_circles").data()


        // me.locations = _.map(me.locations, function(d) {
        //     return d.data
        // })


        _.each(me.locations, function(d2) {
            if (d.data.id == d2.id) {
                d2.x = d.data.x
                d2.y = d.data.y
                d2.lat = latlng.lat
                d2.lng = latlng.lng

            }
        })

        d3.select('#hover_panel')
                    .html("redrawing")
        // current_loss = compute_loss()
        redraw_voronoi()
    }



    function redraw_voronoi() {

        var bounds = VMT.mapholder.map.getBounds(),
        topLeft = VMT.mapholder.map.latLngToLayerPoint(bounds.getNorthWest()),
        bottomRight = VMT.mapholder.map.latLngToLayerPoint(bounds.getSouthEast())
            
        var voronoi_fn = d3.voronoi()
                .x(function(d) {
                    return d.x ;  //To avoid two points being at the same pixel values and therefore having an uncomputable voronoi
                })
                .y(function(d) {
                    return d.y ;  //To avoid two points being at the same pixel values
                })
                .extent([
                    [-100000, -100000],
                    [100000, 100000]  //Need silly extent otherwise some circles get deleted when you zoom in too much
                ])

        // Convert lat lng to points
        me.locations = _.map(me.locations,function(d) {

            var latlng = new L.LatLng(d.lat, d.lng);
            var point = VMT.mapholder.map.latLngToLayerPoint(latlng);

            d.x = point.x;
            d.y = point.y;

            return d
  
        });


        var diagram = voronoi_fn.polygons(me.locations)

        function path_generator(d) {
    
            return d ? "M" + d.join("L") + "Z" : null
        }

        var v_cells = me.voronoi_cells_layer.selectAll(".voronoicells")
            .data(diagram)

        var cell_opacity = $("#cell_opacity_input").val()

        v_cells.enter().append("path").merge(v_cells)
            .attr("class", "voronoicells")
            .attr("d", function(d) {
                return path_generator(d)
            })
            .attr("fill", "black")
            .style("fill-opacity", cell_opacity)
            .on("mouseover", function(d) {

                var total_loss = 0
                _.each(me.locations, function(d) {
                    return total_loss += d.total_loss;
                })


                // Update hover panel
                var template_dict = {}
                template_dict.loss = d3.format(",.0f")(total_loss);

              

                var this_format = d3.format(",.0f")
                template_dict.total_loss = this_format(d.data.total_loss) 
                template_dict.total_demand = this_format(d.data.total_demand) 
                template_dict.total_crimes = this_format(d.data.total_crimes) 
                template_dict.id = d.data.id



                var source = $("#hp_info").html();
                var template = Handlebars.compile(source);
                var html = template(template_dict);
                d3.select('#hover_panel')
                    .html(html)

                
            })

  





        draw_loss()

        var circles = me.facility_location_layer.selectAll(".locations_circles")
            .data(diagram)

        // Scale for circle radius
        var max = _.max(me.locations, function(d) {return d.total_demand})["total_demand"]
        var min = _.min(me.locations, function(d) {return d.total_demand})["total_demand"]

        if (min==max) {min = max-1}
        var facility_size_scale = d3.scaleLinear().domain([0,max]).range([5,15])
        var border_colour_scale = d3.scaleLinear().domain([min,max]).range(["#AAA","#00B0FF"])

        circles = circles.enter().append("circle")
            
            .attr("class", "locations_circles")
            .call(drag)
            .merge(circles)
            .attr("r", function(d) {
                return facility_size_scale(d.data.total_demand)
            })
            .attr("cx", function(d) {
                return d.data.x
            })
            .attr("cy", function(d) {
                return d.data.y
            })
            .style("stroke", function(d) {return border_colour_scale(d.data.total_demand)})
            .style("stroke-width", 5)
            .attr("fill", "black")
            .attr("class", "locations_circles")

    }

    function draw_loss() {

        if (me.locations.length ==0) { return null}

        var loss_dict = compute_loss()
        // var loss_data = loss_dict.loss_data
        var total_loss = loss_dict.total_loss

        //For each prison compute demand

        // Get min and max distance
        var min_loss = _.min(VMT.dataholder.demand_points, function(d) {
            return d.loss
        })["loss"]
        var max_loss = _.max(VMT.dataholder.demand_points, function(d) {
            return d.loss
        })["loss"]
        var mid = (min_loss + max_loss) / 2

        var k = $("#input_line_thickness").val()/10

        var loss_line_colour_scale = d3.scaleLinear().domain([min_loss, mid, max_loss]).range(["#04CE4E", "#CE8E00", "#CE043A"])
        var loss_line_width_scale = d3.scaleLinear().domain([min_loss, mid, max_loss]).range([0.5*k, 5*k, 10*k])
        var loss_line_opacity_scale = d3.scaleLinear().domain([min_loss, mid, max_loss]).range([0.3, 0.5, 1])
      
         me.demand_lines_layer.selectAll(".demand_data_lines").remove()

         me.demand_lines_layer.selectAll(".demand_data_lines").data(VMT.dataholder.demand_points)
            .enter()
            .append("line")
            .attr("x1", function(d) {
                return d.x
            })
            .attr("y1", function(d) {
                return d.y
            })
            .attr("x2", function(d) {
                return d.closest_point.x
            })
            .attr("y2", function(d) {
                return d.closest_point.y
            })
            .style("stroke", function(d) {
                return loss_line_colour_scale(d.loss)
            })
            .style("stroke-width", function(d) {
                return loss_line_width_scale(d.loss)
            })
            .style("stroke-opacity", function(d) {
                return loss_line_opacity_scale(d.loss)
            })
            .attr("class", "demand_data_lines")

            //Want to normalise demand against 85000 prison population and compute 'per prison' demand

              // Update hover panel
            var template_dict = {}
            template_dict.total_loss = d3.format(",.0f")(total_loss);

           


            var source = $("#hp_info_simple").html();
            var template = Handlebars.compile(source);
            var html = template(template_dict);
            d3.select('#hover_panel')
                .html(html)

    }

    function compute_loss() {

        _.each(me.locations, function(d) {
            d.total_demand = 0;
            d.total_loss = 0;
            d.total_crimes = 0;
        })

        _.each(VMT.dataholder.demand_points, function(d) {
            var closest_point = get_closest_point(d)
            var this_distance = get_distance(d, closest_point)

            d.closest_point = closest_point;
            d.distance = this_distance;
            d.loss = this_distance * d.demand_for_prison;

            _.each(me.locations, function(this_location) {
                if (this_location.id == d.closest_point.id) {
                    this_location.total_demand += (d.demand_for_prison/VMT.dataholder.total_demand)*85422
                    this_location.total_loss += d.loss
                    this_location.total_crimes += d.demand_for_prison
                }
            })

            
            
        })

        var total_loss = 0
        _.each(VMT.dataholder.demand_points, function(d) {
            total_loss = total_loss + d.loss
        })

        return {
            total_loss: total_loss
        }

    }

    function get_closest_point(demand_point) {
        var locations2 = _.sortBy(me.locations, function(this_location) {
            return get_distance(this_location, demand_point)
        })
        return locations2[0]
    }

    function get_distance(p1, p2) {

        
        var latlng1 = new L.LatLng(p1.lat, p1.lng);
        var latlng2 = new L.LatLng(p2.lat, p2.lng);

        return latlng1.distanceTo(latlng2)/1000
    }

    this.draw_from_scratch()

    VMT.mapholder.map.on('viewreset moveend', this.draw_from_scratch);

    VMT.mapholder.map.on("click", function(d) {
        if (timer) {
            clearTimeout(timer)
        };
        update_dots(d)
    })

    function optimise_tick() {

        _.each(me.locations, function(d) {
            d.previous_jitter=[0, 0],
            d.previous_loss_improve=false,
            d.jitter_size=jitter_start_size
        })
        timer = setInterval(function() {
            optimise_locations()
        }, 0)
    }

    $('#optimise').on('click', optimise_tick)

    $('#stop').on('click', function(d) {
        clearTimeout(timer)
    })

    function optimise_locations() {

        // For each location, try a small movement and if it improves the loss function, do it
        if (!(current_loss)) {
            current_loss = compute_loss()
        }
        console.log("reoptimising")

        for (var i = 0; i < me.locations.length; i++) {

            var saved_location = jQuery.extend({}, me.locations[i]);

            // if loss improved previousy
            if (me.locations[i].previous_loss_improve) {
                this_jitter = _.map(me.locations[i].previous_jitter, function(d) {
                    return d * jitter_multi_when_previous_improved
                })
            } else {

                me.locations[i].jitter_size = me.locations[i].jitter_size * jitter_multi_when_previous_worse;

                
            }

            //Ocasionally add large jitter just to check it doesn't make things better
                var js = me.locations[i].jitter_size

                if (d3.randomUniform()() > 0.95) {
                    me.locations[i].jitter_size = jitter_start_size * d3.randomUniform()();
                    js = me.locations[i].jitter_size;
                }

                this_jitter = _.map([0, 0], function(d) {
                    return d3.randomUniform(-js, js)()
                })


            //Modify the location of this point
            me.locations[i].x += this_jitter[0]
            me.locations[i].y += this_jitter[1]

            var latlng = VMT.mapholder.map.layerPointToLatLng([me.locations[i].x,me.locations[i].y])
            me.locations[i].lat = latlng.lat;
            me.locations[i].lng = latlng.lng;


            me.locations[i].previous_jitter = this_jitter

            //Recompute loss
            new_loss = compute_loss()


            //If new loss is worse, undo 
            if (new_loss.total_loss > current_loss.total_loss) {
                me.locations[i] = saved_location;
                me.locations[i].jitter_size = me.locations[i].jitter_size * jitter_multi_when_previous_worse;
                me.locations[i].previous_loss_improve = false;
                

            } else {
                current_loss = new_loss
                me.locations[i].previous_loss_improve = true;


            }


        }

        //Ocasionally add large jitter to all points just to check it doesn't make things better - do this when all jitters are small

        var max_jitter_size = _.map(me.locations, function(d) {return d.jitter_size})
        var max_jitter_size = _.max(test)
        var test =  (d3.randomUniform()() > 0.75 & max_jitter_size<0.0001) 


        if (test) {
            saved_locations = $.extend(true, [], me.locations);  
            for (var i = 0; i < me.locations.length; i++) {

                js = d3.randomUniform(-jitter_start_size, jitter_start_size)()

                this_jitter = _.map([0, 0], function(d) {
                        return d3.randomUniform(-js, js)()
                    })
                

                if (d3.randomUniform()() > 0.5) {

                    //Modify the location of this point
                    me.locations[i].x += this_jitter[0]
                    me.locations[i].y += this_jitter[1]
                    me.locations[i].previous_jitter = [0,0]
                    me.locations[i].previous_loss_improve = false
                    me.locations[i].jitter_size = jitter_start_size

                    var latlng = VMT.mapholder.map.layerPointToLatLng([me.locations[i].x,me.locations[i].y])
                    me.locations[i].lat = latlng.lat;
                    me.locations[i].lng = latlng.lng;


                }
                

            }


            new_loss = compute_loss()

            //If new loss is worse, undo 
            if (new_loss.total_loss >= current_loss.total_loss) {
                me.locations = saved_locations;

            } else {
                current_loss = new_loss
                console.log("randomised improvement")

            }
        }




        redraw_voronoi()


    }





}