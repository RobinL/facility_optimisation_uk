function DataHolder(csv_data) {

    var me = this
    //Copy data
    this.all_csv_data = csv_data.slice();
    
    this.demand_points = []

    this.filter_points = function() {
        // Field to filter on
        var filter_value = $("#filter_records_date_field").val();
        
        var filter_format = VMT.column_descriptions_data[VMT.filter_field].format

        me.demand_points = []

        var filter_format = VMT.column_descriptions_data[VMT.filter_field].format
        
        me.demand_points = me.all_csv_data

    };

    this.compute_total_demand = function() {

        me.total_demand = 0

        _.each(this.demand_points, function(d) {
            me.total_demand += d.demand_for_prison
        })

    }

    
    this.process_column_descriptions = function() {

        // Add any keys which are in the data but aren't in column_descriptions_data
        _.each(this.all_csv_data[0], function(d, k) {
            if (!(_.has(VMT.column_descriptions_data, k))) {
                VMT.column_descriptions_data[k] = {
                    "manually_included": false
                }
            } else {

                if (!(_.has(VMT.column_descriptions_data[k], "manually_included"))) {
                    VMT.column_descriptions_data[k]["manually_included"] = true
            }
            }

        })

         // Add an entry for 'none', which will be used by select boxes etc for a null column selection
        VMT.column_descriptions_data["none"] = {
            "manually_included": false,
            "long_name": "None"
        }


        // If they don't have a long name, overwrite with the key
        _.each(VMT.column_descriptions_data, function(d, k) {
            if (!(_.has(d, "long_name"))) {
                d["long_name"] = k
            }
        });

        // Set default colour option to first in the list unless manually specified
        _.each(VMT.column_descriptions_data, function(d, k) {
            if (!(_.has(d, "colour_option"))) {
                d["colour_option"] = _.keys(VMT.colour_options)[0]
                d["colour_option_manually_set"] = false
            } else {
                d["colour_option_manually_set"] = true
            }
        })

        // Hold the key in the dict for easy access later
        _.each(VMT.column_descriptions_data, function(d, k) {
            d["key"] = k
        })


        // Detect whether variables are categorical or continuous
        // Iterate through the columns which will be part of this vis
        var all_csv_data = this.all_csv_data
        _.each(VMT.column_descriptions_data, function(d, k) {
            if (!(_.has(d, "is_categorical"))) {
                // Look through data - if we can parsefloat every value then we call it numeric otherwise categorical
                var categorical = _.some(all_csv_data, function(d2) {
                    this_value = d2[k];

                    if (this_value !== "") {
                        var pf = parseFloat(this_value)

                        if (isNaN(pf)) {
                            return true
                        }
                    }
                    return false

                })
                VMT.column_descriptions_data[k]["is_categorical"] = categorical
            }
        });

        // Set format if not exists
        _.each(VMT.column_descriptions_data, function(d, k) {
            if (!(_.has(d, "format"))) {
                if (d["is_categorical"]) {
                    d["format"] = function(d) {
                        return d
                    }

                } else {
                    d["format"] = d3.format(",.1f")
                }
            }
        })

        // Set parser if not exists
        _.each(VMT.column_descriptions_data, function(d, k) {
            if (!(_.has(d, "val_parser"))) {
                if (d["is_categorical"]) {
                    d["val_parser"] = function(d) {
                        return d
                    }

                } else {
                    d["val_parser"] = parseFloat
                }
            }
        })


        // Detect whether domain has been set manually. 
        _.each(VMT.column_descriptions_data, function(d, k) {
            if (!(_.has(d, "domain"))) {
                d["domain_manually_set"] = false
            } else {
                d["domain_manually_set"] = true
            }
        });

    };


    this.parse_columns = function() {

        _.each(this.all_csv_data, function(d) {
            _.each(VMT.column_descriptions_data, function(d2, k2) {
                
                d[k2] = d2["val_parser"](d[k2])
                
            })
        })

        this.all_csv_data.sort(function(a,b) { 
    return a[VMT.filter_field].getTime()-b[VMT.filter_field].getTime()
    })
    }

    this.set_domains = function(data_type) {



        if (data_type == "all") {
            var all_csv_data = this.all_csv_data
        }
         else {
            var all_csv_data = this.demand_points
        }
        _.each(VMT.column_descriptions_data, function(d1, k1) {

            // For each columns, set the domain

            // If categorical, get uniques

            if (d1["is_categorical"]) {

                var uniques = _.uniq(all_csv_data, function(item, key) {
                    a = item[k1]
                    return item[k1]
                })

                uniques = _.map(uniques, function(d) {
                    return d[k1]
                })

                if (!(d1["domain_manually_set"])) {
                    d1["domain"] = uniques
                }
                d1["colour_scale"] = d3.scaleOrdinal().domain(d1["domain"]).range(VMT.categorical_colours)
            }

            // If numeric, get min max

            if (!(d1["is_categorical"])) {

                var all_values = _.map(all_csv_data, function(d) {
                    return d[k1]
                });

                var all_values = _.filter(all_values, function(d) {
                    return !(isNaN(d))
                })

                var minMetric = Math.min.apply(null, all_values);
                var maxMetric = Math.max.apply(null, all_values);

                // Need to split min to max depending on how many items in colour scale

                // get colour scale 

                var c_options = VMT.colour_options[d1["colour_option"]]

                var num_colours = c_options.length
                var diff = maxMetric - minMetric

                domain = d3.range(minMetric, maxMetric + diff / 100, diff / (c_options.length - 1))

                if (!(d1["domain_manually_set"])) {
                    d1["domain"] = domain
                }

                d1["colour_scale"] = d3.scaleLinear()
                    .domain(d1["domain"])
                    .range(c_options);

                d1["minmax"] = [minMetric, maxMetric]

            }


        })
    }

    this.update_colour_scales = function() {

        var colourScaleOption = "Double condensed"
        var colour_scale = VMT.colour_options[colourScaleOption]

        // Iterate through the column_descriptions_data updating the colour scale

        _.each(VMT.column_descriptions_data, function(d, k) {

            if (d["colour_option_manually_set"] == false) {

                if (!(d["is_categorical"])) {

                    var min_ = d["minmax"][0];
                    var max_ = d["minmax"][1];

                    var diff = max_ - min_;
                    var domain = d3.range(min_, max_ + diff / 100, diff / (colour_scale.length - 1));

                    if (!(d["domain_manually_set"])) {
                        d["domain"] = domain
                    }

                    d["colour_scale"] = d3.scaleLinear().domain(d["domain"]).range(colour_scale)
                }
            }


        })

    }

    this.get_timeseries_data = function(this_geography_id) {

        return  _.filter(this.all_csv_data, function(d) {
            
            return d["geography_id"] == this_geography_id
        }) 

    }

    //  Get rid of rows which don't have lat lng
    this.filter_out_invalid_coordinates = function() {
        this.all_csv_data = _.filter(this.all_csv_data, function(d) {
            if (isNaN(d["lat"])) {
                return false
            }
            if (isNaN(d["lng"])) {
                return false
            }
            return true
        })
    }

};